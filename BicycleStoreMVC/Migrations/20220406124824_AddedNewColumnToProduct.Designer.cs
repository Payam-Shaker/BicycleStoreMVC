// <auto-generated />
using System;
using BicycleStoreMVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BicycleStoreMVC.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220406124824_AddedNewColumnToProduct")]
    partial class AddedNewColumnToProduct
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BicycleStore.Domain.Models.Brand", b =>
                {
                    b.Property<int>("BrandID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnName("Brand_Name")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("BrandID")
                        .HasName("Brand_Id");

                    b.ToTable("Brand","Production");
                });

            modelBuilder.Entity("BicycleStore.Domain.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnName("Category_Name")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("CategoryID")
                        .HasName("Category_Id");

                    b.ToTable("Category","Production");
                });

            modelBuilder.Entity("BicycleStore.Domain.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnName("Customer_City")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Customer_Email")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("Customer_FirstName")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("Customer_LastName")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .HasColumnName("Customer_Phone")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Role")
                        .HasColumnName("Role")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnName("Customer_Street")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ZipCode")
                        .HasColumnName("Customer_ZipCode")
                        .HasColumnType("varchar(50)");

                    b.HasKey("CustomerID")
                        .HasName("Customer_Id");

                    b.ToTable("Customer","Sales");
                });

            modelBuilder.Entity("BicycleStore.Domain.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerID")
                        .HasColumnName("Customer_Id")
                        .HasColumnType("INT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnName("Order_Date")
                        .HasColumnType("DATE");

                    b.Property<DateTime>("OrderRequiredDate")
                        .HasColumnName("Order_Required_Date")
                        .HasColumnType("DATE");

                    b.Property<short>("OrderStatus")
                        .HasColumnName("Order_Status")
                        .HasColumnType("SMALLINT");

                    b.Property<DateTime?>("ShippingDate")
                        .HasColumnName("Order_Shipped_Date")
                        .HasColumnType("DATE");

                    b.Property<int>("StaffID")
                        .HasColumnName("Staff_Id")
                        .HasColumnType("INT");

                    b.Property<int>("StoreID")
                        .HasColumnName("Store_Id")
                        .HasColumnType("INT");

                    b.HasKey("OrderID")
                        .HasName("Order_Id");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StaffID");

                    b.HasIndex("StoreID");

                    b.ToTable("Order","Sales");
                });

            modelBuilder.Entity("BicycleStore.Domain.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnName("Discount")
                        .HasColumnType("DECIMAL (4,2)");

                    b.Property<decimal>("ListPrice")
                        .HasColumnName("List_Price")
                        .HasColumnType("DECIMAL (10,2)");

                    b.Property<int>("ProductID")
                        .HasColumnName("Product_Id")
                        .HasColumnType("INT");

                    b.Property<int>("Quantity")
                        .HasColumnName("Item_Quantity")
                        .HasColumnType("INT");

                    b.HasKey("OrderID", "ItemID");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.HasIndex("ProductID")
                        .IsUnique();

                    b.ToTable("Order_Item","Sales");
                });

            modelBuilder.Entity("BicycleStore.Domain.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandID")
                        .HasColumnName("Brand_Id")
                        .HasColumnType("INT");

                    b.Property<int?>("Brand_Id")
                        .HasColumnName("Brand_Id1")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnName("Category_Id")
                        .HasColumnType("INT");

                    b.Property<string>("Image")
                        .HasColumnName("Image")
                        .HasColumnType("varchar(500)");

                    b.Property<decimal>("ListPrice")
                        .HasColumnName("Product_Price")
                        .HasColumnType("DECIMAL(10,2)");

                    b.Property<short>("ModelYear")
                        .HasColumnName("Product_Year")
                        .HasColumnType("SMALLINT");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnName("Product_Name")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("ProductID")
                        .HasName("Product_Id");

                    b.HasIndex("BrandID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Product","Production");
                });

            modelBuilder.Entity("BicycleStore.Domain.Models.Staff", b =>
                {
                    b.Property<int>("StaffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Staff_Email")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("Staff_FirstName")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("Staff_LastName")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("Staff_Phone")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<int?>("StoreID")
                        .HasColumnType("int");

                    b.HasKey("StaffID")
                        .HasName("Staff_Id");

                    b.HasIndex("StoreID");

                    b.ToTable("Staff","Sales");
                });

            modelBuilder.Entity("BicycleStore.Domain.Models.Stock", b =>
                {
                    b.Property<int>("StoreID")
                        .HasColumnName("Store_Id")
                        .HasColumnType("INT");

                    b.Property<int>("ProductID")
                        .HasColumnName("Product_Id")
                        .HasColumnType("INT");

                    b.Property<int>("Quantity")
                        .HasColumnName("Stock_Quantity")
                        .HasColumnType("INT");

                    b.HasKey("StoreID");

                    b.HasIndex("ProductID")
                        .IsUnique();

                    b.ToTable("Stock","Production");
                });

            modelBuilder.Entity("BicycleStore.Domain.Models.Store", b =>
                {
                    b.Property<int>("StoreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnName("Store_City")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("StoreEmail")
                        .HasColumnName("Store_Email")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("StoreName")
                        .HasColumnName("Store_Name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("StorePhone")
                        .HasColumnName("Store_Phon")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Street")
                        .HasColumnName("Store_Street")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("ZipCode")
                        .HasColumnName("Store_ZipCode")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("StoreID")
                        .HasName("Store_Id");

                    b.ToTable("Store","Sales");
                });

            modelBuilder.Entity("BicycleStore.Domain.Models.Order", b =>
                {
                    b.HasOne("BicycleStore.Domain.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .HasConstraintName("Customer_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BicycleStore.Domain.Models.Staff", "Staff")
                        .WithMany("Orders")
                        .HasForeignKey("StaffID")
                        .HasConstraintName("Staff_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BicycleStore.Domain.Models.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreID")
                        .HasConstraintName("Store_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BicycleStore.Domain.Models.OrderItem", b =>
                {
                    b.HasOne("BicycleStore.Domain.Models.Order", "Order")
                        .WithOne("OrderItems")
                        .HasForeignKey("BicycleStore.Domain.Models.OrderItem", "OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BicycleStore.Domain.Models.Product", "Product")
                        .WithOne("OrderItems")
                        .HasForeignKey("BicycleStore.Domain.Models.OrderItem", "ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BicycleStore.Domain.Models.Product", b =>
                {
                    b.HasOne("BicycleStore.Domain.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BicycleStore.Domain.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BicycleStore.Domain.Models.Staff", b =>
                {
                    b.HasOne("BicycleStore.Domain.Models.Store", null)
                        .WithMany("Staffs")
                        .HasForeignKey("StoreID");
                });

            modelBuilder.Entity("BicycleStore.Domain.Models.Stock", b =>
                {
                    b.HasOne("BicycleStore.Domain.Models.Product", "Product")
                        .WithOne("Stocks")
                        .HasForeignKey("BicycleStore.Domain.Models.Stock", "ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BicycleStore.Domain.Models.Store", "Store")
                        .WithOne("Stocks")
                        .HasForeignKey("BicycleStore.Domain.Models.Stock", "StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
